import { println, DefaultTemplates } from './utils';

const uuid = require('uuid');
const fs = require('fs');

class PageContainer {
	/**
	 * assign unique ID & initalize Page container as a map
	 * @param templatePath: String - path to template associated with this container
	 * @throws Error if there is no template at specified templatePath
	 */
	constructor(templatePath) {
		this._id = uuid();
		this.pages = new Map();

		if (typeof templatePath == "string")
			this.setTemplate(templatePath);
	}

	/**
	 * set template path
	 * @param path: String -- path to template 
	 * @return old path
	 */
	setTemplate(path) {
		if (!fs.existsSync(path)) throw new Error(`File does not exist at ${path}`);
		const old = this.templatePath;
		this.templatePath = path;
		return old;
	}

	/**
	 * @param pattern - Pattern object instance
	 * @return Page object matching specified pattern
	 */
	getPage(pattern) {
		return this.pages.get(pattern.stringify());
	}

	/**
	 * if page does not exist, it will be created
	 * @param pattern - Pattern object instance
	 * @param data - data generated by a DataModel
	 * @return Page object with data updated to @data param
	 */
	getPageWithData(pattern, data) {
		let page = this.pages.get(pattern.stringify());
		if (!page)
			return this.createPage(data, pattern);
		page.recomputeData(data);
		return page;
	}

	/**
	 * create page and add to this container's map
	 * @param data - data generated by a DataModel
	 * @param pattern - Pattern object instance
	 * @return created Page instance
	 */
	createPage(data, pattern) {
		let page = new Page(data, pattern, this._id);
		this.pages.set(pattern.stringify(), page);
		return page;
	}

	/**
	 * @return string of template associated with this container
	 */
	getTemplate() {
		try {
			return fs.readFileSync(this.getTemplatePath(), 'utf-8');
		} catch(e) {
			console.log(e.stack);
			console.log(e.message);
			return DefaultTemplates.hasError();
		}
	}

	/**
	 * @return path to template associated with this container
	 */
	getTemplatePath() {
		return this.templatePath;
	}

	get id() {
		return this._id;
	}
}