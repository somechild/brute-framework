import { deepMatch, getSafe, getConfigs, TemplateProcessor, Weaver } from '../helpers/utils';
import { maxWovenInsertionAttempts as maxAttempts } from '../helpers/constants';

const uuid = require('uuid');
const fs = require('fs');

export default class Page {
	/**
	 * @param data: data generated by an instance of DataModel that is to be used in the file created by this page
	 * @param pattern: a Pattern that this page is associated with
	 * @param containerId: id of PageContainer instance that contains this page
	 * @throws Error if page does not belong to a valid PageContainer instance
	 * @throws Error if page store directory has not been configured
	 * @throws Error if unexpected error initializing page with unique id
	 */
	constructor(data, pattern, containerId) {
		this._id = uuid();
		let insertionAttempts = maxAttempts;
		while(!Weaver.insert(this) && insertionAttempts --> 0)
			this._id = uuid();
		if (!insertionAttempts) throw new Error('Unexpected error initializing ${this.constructor.name} class with id ${this.id} & data ${data}');

		this.context = data;
		this.pattern = pattern;
		this.pageContainer = containerId;
		this.contextHasChanged = true;

		this.getFile(); // force creation of a file
	}

	/**
	 * @param data: data generated by an instance of DataModel
	 * @return old data
	 */
	recomputeData(data) {
		if (data == this.context || deepMatch(data, this.context))
			return data;
		const old = this.context;
		this.context = data;
		this.contextHasChanged = true;
		return old;
	}

	get id() {
		return this._id;
	}

	/**
	 * @return ID of PageContainer instance containing this object
	 */
	get containerId() {
		return this.pageContainer;
	}

	/**
	 * get the file path associated with this object instance
	 * if context has changed, update the file before returning path
	 * @throws Error if page does not belong to a valid PageContainer instance
	 * @throws Error if page store directory has not been configured
	 * @throws Error if invalid template
	 * @return path to file associated with this page
	 */
	getFile() {
		let filePath = getSafe(getConfigs(), 'general.pageStorePath');
		if (!filePath) throw new Error('page store directory has not been configured');
		filePath += this.id + ".html";
		if (this.contextHasChanged || !fs.existsSync(filePath)) {
			let template = Weaver.query('PageContainer', this.containerId)
			if (!template) throw new Error(`Page with id ${this.id} does not belong to a container.`);
			template = template.getTemplate();
			let processor = new TemplateProcessor(template);

			fs.writeFileSync(filePath, processor.processWith(this.context));

			this.contextHasChanged = false;
		};

		return filePath;
	}
}