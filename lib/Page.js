'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('./utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var uuid = require('uuid');
var fs = require('fs');

var Page = function () {
	/**
  * @param data: data generated by an instance of DataModel that is to be used in the file created by this page
  * @param pattern: a Pattern that this page is associated with
  * @param containerId: id of PageContainer instance that contains this page
  */
	function Page(data, pattern, containerId) {
		_classCallCheck(this, Page);

		this.context = data;
		this.pattern = pattern;
		this.pageContainer = containerId;
		this.contextHasChanged = true;

		this._id = uuid();

		// TODO: create file
	}

	/**
  * @param data: data generated by an instance of DataModel
  * @return old data
  */


	_createClass(Page, [{
		key: 'recomputeData',
		value: function recomputeData(data) {
			if (data == this.context || (0, _utils.deepMatch)(data, this.context)) return data;
			var old = this.context;
			this.context = data;
			this.contextHasChanged = true;
			return old;
		}

		/**
   * @return id of this page
   */

	}, {
		key: 'getId',
		value: function getId() {
			return this._id;
		}

		/**
   * @return ID of PageContainer instance containing this object
   */

	}, {
		key: 'getContainerId',
		value: function getContainerId() {
			return this.pageContainer;
		}

		/**
   * get the file path associated with this object instance
   * if context has changed, update the file before returning path
   * @return path to file associated with this page
   */

	}, {
		key: 'getFile',
		value: function getFile() {
			var filePath = (0, _utils.getSafe)((0, _utils.getConfigs)(), 'general.pageStorePath');
			if (!filePath) throw new Error('page store directory has not been configured');
			filePath += this.getId() + ".html";
			if (this.contextHasChanged || fs.existsSync(filePath)) {
				var template = (0, _utils.weaveQuery)('PageContainer', this.getContainerId()).getTemplate();
				// TODO: load in data to filePath using cheerio
				// TODO: write file
				this.contextHasChanged = false;
			};

			return filePath;
		}
	}]);

	return Page;
}();