'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Page = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('../helpers/utils');

var _constants = require('../helpers/constants');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var uuid = require('uuid');
var fs = require('fs');

var Page = exports.Page = function () {
	/**
  * @param data: data generated by an instance of DataModel that is to be used in the file created by this page
  * @param pattern: a Pattern that this page is associated with
  * @param containerId: id of PageContainer instance that contains this page
  * @throws Error if page does not belong to a valid PageContainer instance
  * @throws Error if page store directory has not been configured
  * @throws Error if unexpected error initializing page with unique id
  */
	function Page(data, pattern, containerId) {
		_classCallCheck(this, Page);

		this._id = uuid();
		var insertionAttempts = _constants.maxWovenInsertionAttempts;
		while (!_utils.Weaver.insert(this) && insertionAttempts > 0) {
			this._id = uuid();
			insertionAttempts--;
		}
		if (!insertionAttempts) throw new Error('Unexpected error initializing ${this.constructor.name} class with id ${this.id} & data ${data}');

		this.context = data;
		this.pattern = pattern;
		this.pageContainer = containerId;
		this.contextHasChanged = true;

		this.getFile(); // force creation of a file
	}

	/**
  * @param data: data generated by an instance of DataModel
  * @return old data
  */


	_createClass(Page, [{
		key: 'recomputeData',
		value: function recomputeData(data) {
			if (data == this.context || (0, _utils.deepMatch)(data, this.context)) return data;
			var old = this.context;
			this.context = data;
			this.contextHasChanged = true;
			return old;
		}
	}, {
		key: 'getFile',


		/**
   * get the file path associated with this object instance
   * if context has changed, update the file before returning path
   * @throws Error if page does not belong to a valid PageContainer instance
   * @throws Error if page store directory has not been configured
   * @throws Error if invalid template
   * @return path to file associated with this page
   */
		value: function getFile() {
			var filePath = (0, _utils.getSafe)((0, _utils.getConfigs)(), 'general.pageStorePath');
			if (!filePath) throw new Error('page store directory has not been configured');
			filePath += this.id + ".html";
			if (this.contextHasChanged || !fs.existsSync(filePath)) {
				var template = _utils.Weaver.query('PageContainer', this.containerId);
				if (!template) throw new Error(`Page with id ${this.id} does not belong to a container.`);
				template = template.getTemplate();
				var processor = new _utils.TemplateProcessor(template);

				fs.writeFileSync(filePath, processor.processWith(this.context));

				this.contextHasChanged = false;
			};

			return filePath;
		}
	}, {
		key: 'id',
		get: function get() {
			return this._id;
		}

		/**
   * @return ID of PageContainer instance containing this object
   */

	}, {
		key: 'containerId',
		get: function get() {
			return this.pageContainer;
		}
	}]);

	return Page;
}();